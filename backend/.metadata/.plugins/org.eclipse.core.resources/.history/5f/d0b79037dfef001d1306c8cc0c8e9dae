package com.cg.users.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cg.users.dto.UserDto;
import com.cg.users.entity.User;
import com.cg.users.repository.UserRepo;
import com.cg.users.service.UserService;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private UserRepo repo;

	@Autowired
	private ModelMapper mapper;

	@Override
	public UserDto add(UserDto userDto) {
		System.err.println(userDto);
		// check if user already exits
		Optional<User> optionalUser = repo.findByEmailId(userDto.getEmailId());
		if (optionalUser.isPresent())
			throw new RuntimeException("User already exists");

		if (repo.findByMobileNumber(userDto.getMobileNumber()).isPresent())
			throw new RuntimeException("Mobile number already registered");

		// map to entity
		User user = mapper.map(userDto, User.class);
		System.err.println(user);
//		user.setPassword(userDto.getHashedPass());
		// save in database
		// map to dto and return
		return mapper.map(repo.save(user), UserDto.class);
	}

	@Override
	public UserDto update(UserDto userDto) {
		Optional<User> optionalUser = repo.findById(userDto.getUserId());
		if (optionalUser.isEmpty())
			throw new RuntimeException("User doesn't exists");

		User user = optionalUser.get();
		if (userDto.getMobileNumber() != null) {
			if (repo.findByMobileNumber(userDto.getMobileNumber()).isPresent())
				throw new RuntimeException("Mobile number already registered");

			user.setMobileNumber(userDto.getMobileNumber());
		}
		if (userDto.getFirstName() != null)
			user.setFirstName(userDto.getFirstName());
		if (userDto.getLastName() != null)
			user.setLastName(userDto.getLastName());

		return mapper.map(repo.save(user), UserDto.class);
	}

	@Override
	public UserDto delete(Long id) {
		User user = repo.findById(id).orElseThrow(() -> new RuntimeException("User Not found"));
		repo.deleteById(id);
		return mapper.map(user, UserDto.class);
	}

	@Override
	public UserDto changePassword(UserDto userDto) {
		User user = repo.findByEmailId(userDto.getEmailId())
				.orElseThrow(() -> new RuntimeException("User doesn't exists"));
		user.setPassword(userDto.getPassword());
		return mapper.map(repo.save(user), UserDto.class);
	}

	@Override
	public UserDto get(Long userId) {
		User user = repo.findById(userId).orElseThrow(() -> new RuntimeException("User Not found"));
		return mapper.map(user, UserDto.class);
	}

	@Override
	public List<UserDto> get() {
		return mapper.map(repo.findAll(), new TypeToken<List<UserDto>>() {
		}.getType());
	}

	@Override
	public UserDto get(String email) {
		User user = repo.findByEmailId(email).orElseThrow(() -> new RuntimeException("User not found"));
		UserDto dto = mapper.map(user, UserDto.class);
		dto.setHashedPass(user.getPassword());
		return dto;
	}

}
